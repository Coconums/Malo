<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerStandRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>playerStandRight</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

if (!audio_is_playing(mus_game1) and room = room1)
{
    audio_stop_all();
    global.mus = audio_play_sound(mus_game1,1,true);
    audio_sound_gain(global.mus,1,0);
}

grav = 0.2;

hsp = 0;
vsp = 0;

movespeed = 2;
jumpspeed = 4;
jumpcount = 0;
jumplimit = 2;

move_was_right = true;
move_was_left = false;
prev_move = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get Player Input

if (os_browser == browser_not_a_browser)
{
    move_right = keyboard_check(vk_right) or gamepad_button_check(0,gp_padr);
    move_left = -(keyboard_check(vk_left) or gamepad_button_check(0,gp_padl));
    move_tap_jump = keyboard_check_pressed(vk_up) or gamepad_button_check_pressed(0,gp_face1);
    move_hold_jump = keyboard_check(vk_up) or gamepad_button_check(0,gp_face1);
    button_pause = keyboard_check(vk_escape) or gamepad_button_check(0,gp_start);
}
else
{
    move_right = keyboard_check(vk_right) or gamepad_button_check(0,gp_padr);
    move_left = keyboard_check(vk_left) or gamepad_button_check(0,gp_padl);
    move_tap_jump = keyboard_check_pressed(vk_up) or gamepad_button_check_pressed(0,gp_face1);
    move_hold_jump = keyboard_check(vk_up) or gamepad_button_check(0,gp_face1);
    button_pause = keyboard_check(vk_escape) or gamepad_button_check(0,gp_start);
}


//React to Inputs

if (os_browser == browser_not_a_browser) move = move_left + move_right;
else move = (move_left * (0 - 1)) +  move_right;

hsp = move * movespeed;

if (vsp &lt; 6)
{
    vsp += grav;
}

if (place_meeting(x,y+1,bound))
{
    jumpcount = 0;
}
if (move_tap_jump) &amp;&amp; (jumpcount &lt; jumplimit)
{
    jumpcount += 1;
    vsp = -jumpspeed;
}

if (vsp &lt; 0) &amp;&amp; (!move_hold_jump)
{
    vsp = max(vsp,-jumpspeed/4);
}

if (button_pause) game_end();


//Collision

if (place_meeting(x+hsp,y,bound))
{
    while(!place_meeting(x+sign(hsp),y,bound))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += hsp;

if (place_meeting(x,y+vsp,bound))
{
    while(!place_meeting(x,y+sign(vsp),bound))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;


//Sprite Indexing

image_speed = 0.1;

if (move != 0)
{
    if (move == 1)
    {
        move_was_right = true;
        move_was_left = false;
        prev_move = 1;
    }
    if (move == -1)
    {
        move_was_left = true;
        move_was_right = false;
        prev_move = -1;
    }
}

if (place_meeting(x,y+1,bound))
{
    if (move_was_right)
    {
        if (sprite_index != playerRunRight) image_index = 0;
        sprite_index = playerRunRight;
    }
    if (move_was_left)
    {
        if (sprite_index != playerRunLeft) image_index = 0;
        sprite_index = playerRunLeft;
    }
    if (move == 0)
    {
        if (move_was_right)
        {
            if (sprite_index != playerStandRight) image_index = 0;
            sprite_index = playerStandRight;
        }
        if (move_was_left)
        {
            if (sprite_index != playerStandLeft) image_index = 0;
            sprite_index = playerStandLeft;
        }
    }
}
if (!place_meeting(x,y+1,bound))
{
    if (move_was_right)
    {
        if (sprite_index != playerJumpRight) image_index = 0;
        sprite_index = playerJumpRight;
    }
    if (move_was_left)
    {
        if (sprite_index != playerJumpLeft) image_index = 0;
        sprite_index = playerJumpLeft;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
