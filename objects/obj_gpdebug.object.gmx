<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(320,180);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

draw_set_color(c_black);
draw_set_font(fnt_title);
font_size = font_get_size(fnt_title);

gp_num = gamepad_get_device_count();

xinput = gamepad_is_connected(0);
dinput = gamepad_is_connected(4);

if (xinput)
{
    xi_up = gamepad_button_check(gp_padu,xinput);
    xi_down = gamepad_button_check(gp_padd,xinput);
    xi_left = gamepad_button_check(gp_padl,xinput);
    xi_right = gamepad_button_check(gp_padr,xinput);
    
    xi_a = gamepad_button_check(gp_face1,xinput);
    xi_b = gamepad_button_check(gp_face2,xinput);
    xi_x = gamepad_button_check(gp_face3,xinput);
    xi_y = gamepad_button_check(gp_face4,xinput);
}
if (dinput)
{
    di_up = gamepad_button_check(gp_padu,dinput);
    di_down = gamepad_button_check(gp_padd,dinput);
    di_left = gamepad_button_check(gp_padl,dinput);
    di_right = gamepad_button_check(gp_padr,dinput);
    
    di_a = gamepad_button_check(gp_face1,dinput);
    di_b = gamepad_button_check(gp_face2,dinput);
    di_x = gamepad_button_check(gp_face3,dinput);
    di_y = gamepad_button_check(gp_face4,dinput);
}

draw_text_ext(
    view_wview/2,
    60,
    "Gamepad Debugger",
    font_size + (font_size/2),
    view_wview - 24
);

if (xinput)
{
    draw_text_ext(
        view_wview/4,
        view_hview/2,
        xi_up,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) - 15,
        (view_hview/2) + 15,
        xi_left,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) + 15,
        (view_hview/2) + 15,
        xi_right,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        view_wview/4,
        (view_hview/2) + 30,
        xi_down,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) * 3,
        view_hview/2,
        xi_y,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        ((view_wview/4) * 3) - 15,
        (view_hview/2) + 15,
        xi_x,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        ((view_wview/4) * 3) + 15,
        (view_hview/2) + 15,
        xi_b,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) * 3,
        (view_hview/2) + 30,
        xi_a,
        font_size + (font_size/2),
        view_wview - 24
    );
}
if (dinput)
{
    draw_text_ext(
        view_wview/4,
        view_hview/2,
        di_up,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) - 15,
        (view_hview/2) + 15,
        di_left,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) + 15,
        (view_hview/2) + 15,
        di_right,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        view_wview/4,
        (view_hview/2) + 30,
        di_down,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) * 3,
        view_hview/2,
        di_y,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        ((view_wview/4) * 3) - 15,
        (view_hview/2) + 15,
        di_x,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        ((view_wview/4) * 3) + 15,
        (view_hview/2) + 15,
        di_b,
        font_size + (font_size/2),
        view_wview - 24
    );
    draw_text_ext(
        (view_wview/4) * 3,
        (view_hview/2) + 30,
        di_a,
        font_size + (font_size/2),
        view_wview - 24
    );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
