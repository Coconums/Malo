<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txt_alpha = 0;
txt_print = "";
txt_step = 0;
txt_timer = 0;

timer = 0;

depth = depth - instance_number(obj_dialog);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Letters and messages

txt_advance = keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0,gp_face3);

if (txt_step &lt; txt_string_length)
{
    if (is_array(global.txt_dialog)) instance_deactivate_object(obj_txtcont);
    txt_step += txt_speed;
    txt_print = string_copy(txt_string,0,txt_step);
    txt_timer += txt_speed;
    if (txt_timer == 2)
    {
        audio_play_sound(snd_dialog,0,false);
        txt_timer = 0;
    }
}

if (txt_step == txt_string_length)
{
    if (is_array(global.txt_dialog))
    {
        instance_activate_object(obj_txtcont);
        if (txt_advance and global.msg != array_length_1d(global.txt_dialog) - 1)
        {
            global.msg ++;
            txt_step = 0;
            txt_string = global.txt_dialog[global.msg];
            txt_string_length = string_length(txt_string);
            txt_font_size = font_get_size(txt_font);
            
            draw_set_font(txt_font);
            
            txt_string_width = string_width_ext(txt_string,txt_font_size + (txt_font_size/2),txt_width - txt_padding * 2);
            txt_string_height = string_height_ext(txt_string,txt_font_size + (txt_font_size/2),txt_width - txt_padding * 2);
            
            txt_box_w = txt_string_width + (txt_padding * 2);
            txt_box_h = txt_string_height + (txt_padding * 2);
        }
    }
    else
    {
        TweenFire(id,timer__,EaseLinear,0,true,0.0,3.0,0,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render Text

if (timer != 1)
{
    draw_set_alpha(txt_alpha);
    txt_alpha = 1;
    
    display_set_gui_size(320,180);
    
    draw_set_font(txt_font);
    
    if (box == true)
    {
        draw_set_color(c_black);
        draw_rectangle(x + box_padding,y + box_padding,view_wview - box_padding,view_hview - box_padding,0);
    }
    
    draw_set_color(txt_color);
    draw_set_halign(txt_halign);
    draw_set_valign(txt_valign);
    
    draw_text_ext
    (
        x + box_padding + txt_padding,
        y + box_padding + txt_padding,
        txt_print,
        txt_font_size + (txt_font_size/2),
        txt_width
    );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
