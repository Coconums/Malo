<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MaloBox v0.1

txt_alpha = 0;
txt_print = "";
txt_step = 0;
txt_timer = 0;

timer = 0;

depth = depth - instance_number(obj_dialog);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Letters and Messages

txt_advance[0] = keyboard_check_pressed(vk_enter);
txt_advance[1] = (
    gamepad_button_check_pressed(0,gp_face3) or
    gamepad_button_check_pressed(4,gp_face1) or
    gamepad_button_check_pressed(4,gp_face2) or
    gamepad_button_check_pressed(5,gp_face1) or
    gamepad_button_check_pressed(5,gp_face2) or
    gamepad_button_check_pressed(6,gp_face1) or
    gamepad_button_check_pressed(6,gp_face2) or
    gamepad_button_check_pressed(7,gp_face1) or
    gamepad_button_check_pressed(7,gp_face2) or
    gamepad_button_check_pressed(8,gp_face1) or
    gamepad_button_check_pressed(8,gp_face2) or
    gamepad_button_check_pressed(9,gp_face1) or
    gamepad_button_check_pressed(9,gp_face2) or
    gamepad_button_check_pressed(10,gp_face1) or
    gamepad_button_check_pressed(10,gp_face2) or
    gamepad_button_check_pressed(11,gp_face1) or
    gamepad_button_check_pressed(11,gp_face2)
    );

if (txt_step &lt; txt_string_length)
{
    /*
    if (txt_step = emph_start[i])
    {
        txt_color = emph_color[i];
        if (txt_step = emph_end[i]) txt_color = def_color;
    }
    else
    {
    */
        if (is_array(txt_string)) instance_deactivate_object(obj_txtcont);
        txt_step += txt_speed;
        txt_print = string_copy(cur_string,0,txt_step);
        txt_timer += txt_speed;
        if (txt_timer == 2)
        {
            audio_play_sound(snd_dialog,0,false);
            txt_timer = 0;
        }
    }
//}

if (txt_step == txt_string_length)
{
    if (is_array(txt_string))
    {
        instance_activate_object(obj_txtcont);
        if (global.using_gamepad)
        {
            if (txt_advance[1] and global.msg != array_length_1d(txt_string) - 1)
            {
                global.msg += 1;
                /*
                cur_string = txt_string[global.msg];
                txt_step = 0;
                
                txt_string_length = string_length(cur_string);
                txt_font_size = font_get_size(txt_font);
                
                draw_set_font(txt_font);
                */
                //txt_string_width = string_width_ext(cur_string,txt_font_size + (txt_font_size/2),txt_width - box_padding - txt_padding);
                //txt_string_height = string_height_ext(cur_string,txt_font_size + (txt_font_size/2),txt_height - box_padding - txt_padding);
                
                //txt_box_w = txt_width + txt_padding;
                //txt_box_h = txt_height + txt_padding;
                MaloBox(
                    txt_string,
                    txt_font,
                    txt_font_size,
                    txt_color,
                    txt_speed,
                    txt_x,
                    txt_y,
                    txt_width,
                    txt_height,
                    txt_halign,
                    txt_valign,
                    box_color,
                    box_alpha
                );
                instance_destroy(id);
                
            }
        }
        else
        {
            if (txt_advance[0] and global.msg != array_length_1d(txt_string) - 1)
            {
                global.msg += 1;
                /*
                txt_step = 0;
                cur_string = txt_string[global.msg];
                */
                
                //txt_string_width = string_width_ext(cur_string,txt_font_size + (txt_font_size/2),txt_width - box_padding - txt_padding);
                //txt_string_height = string_height_ext(cur_string,txt_font_size + (txt_font_size/2),txt_height - box_padding - txt_padding);
                
                //txt_box_w = txt_string_width + txt_padding;
                //txt_box_h = txt_string_height + txt_padding;
                
                MaloBox(
                    txt_string,
                    txt_font,
                    txt_font_size,
                    txt_color,
                    txt_speed,
                    txt_x,
                    txt_y,
                    txt_width,
                    txt_height,
                    txt_halign,
                    txt_valign,
                    box_color,
                    box_alpha
                );
                instance_destroy(id);
            }
        }
    }
    else
    {
        TweenFire(id,timer__,EaseLinear,0,true,0.0,3.0,0,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render Text

//Set GUI size
display_set_gui_size(320,180);

//If...timer isn't set to one? I'm sure I have a reason for that...
//Regardless, do the following:
if (timer != 1)
{

    //Set the alpha in a way that we can print one letter at a time.
    draw_set_alpha(txt_alpha);
    txt_alpha = 1;
    
    draw_set_font(txt_font);
    
    //Draw the textbox. Hardcoded because I really like the position
    //I set it at. I'll leave the code where it adjusts with the box
    //size commented if you'd like that.
    draw_set_color(box_color);
    draw_set_alpha(box_alpha);
    box_draw = draw_rectangle(
        x + box_padding,
        y + box_padding,
        txt_width - box_padding,
        txt_height - box_padding,
        0
    );
    //box_draw = draw_rectangle(x + box_padding,y + box_padding,view_wview - box_padding,view_hview - box_padding,0);
    
    draw_set_halign(txt_halign);
    draw_set_valign(txt_valign);
    
    //If we have scriptmarks in our string, switch between printing
    //colors for the text until we run out of scriptmarks, then finish the string.
    /*
    if (is_emph)
    {
        var i = 0, cur_cat = "";
        repeat(emph_count + 1)
        {
            draw_set_color(txt_color);
            draw_text_ext(
                (x + box_padding + txt_padding) + string_length(cur_cat),
                (y + box_padding + txt_padding),
                emph_start[i],
                txt_font_size,
                (txt_width - (box_padding*2) - (txt_padding*2))
            );
            cur_cat = string_copy(cur_string,0,emph_start[i]);
            
            draw_set_color(emph_color[i]);
            draw_text_ext(
                (x + box_padding + txt_padding) + string_length(cur_cat),
                (y + box_padding + txt_padding),
                emph[i],
                txt_font_size,
                (txt_width - (box_padding*2) - (txt_padding*2))
            );
            cur_cat = string_copy(cur_string,0,emph[i]);
            
            i ++;
            if (i = emph_count)
            {
                draw_set_color(txt_color);
                draw_text_ext(
                    (x + box_padding + txt_padding) + string_length(cur_cat),
                    (y + box_padding + txt_padding),
                    string_copy(cur_string,cur_cat,string_length(cur_string)),
                    txt_font_size,
                    (txt_width - (box_padding*2) - (txt_padding+2))
                );
            }
        }
    }
    else
    {
        draw_set_color(txt_color);
        draw_text_ext(
            x + box_padding + txt_padding,
            y + box_padding + txt_padding,
            txt_print,
            txt_font_size + (txt_font_size/2),
            txt_width - (box_padding*2) - (txt_padding*2)
        );
    }
    */
    
    draw_set_color(txt_color);
    draw_set_alpha(txt_alpha);
    draw_text_ext(
        x + box_padding + txt_padding,
        y + box_padding + txt_padding,
        txt_print,
        txt_font_size + (txt_font_size/2),
        txt_width - (box_padding*2) - (txt_padding*2)
    );
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
