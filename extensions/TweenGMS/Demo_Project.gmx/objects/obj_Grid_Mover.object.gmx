<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_GridCrate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declare Stuff

isMoving = false;           // Whether or not instance is moving
useDelta = true;            // Use seconds?
moveDuration =  0.5;        // Time for instance to move to next grid cell
cellSize = 64;              // Size of grid cells
moveDirection = -1;         // Track relative move direction
ease = EaseInOutElastic;    // Ease to use

x = 6*cellSize - cellSize/2;
y = 4*cellSize - cellSize/2;

// Create reusable tween for movement
tweenMove = TweenCreate(id);
// Set [isMoving] to true when tween starts playing
TweenAddCallback(tweenMove, TWEEN_EV_PLAY, id, SetIsMoving, true);
// Set [isMoving] to false when tween finishes playing
TweenAddCallback(tweenMove, TWEEN_EV_FINISH, id, SetIsMoving, false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine Movement

// Clear move direction
moveDirection = -1;

// Get random input direction
if (irandom(room_speed) == 0)
{
    moveDirection = choose(0,90,180,270);
}

// Check for any player input
if (keyboard_check(vk_right)) moveDirection = 0; else
if (keyboard_check(vk_up)) moveDirection = 90; else
if (keyboard_check(vk_left)) moveDirection = 180; else
if (keyboard_check(vk_down)) moveDirection = 270;

// Tween position based on direction input, if not already moving
if (isMoving == false)
{
    switch(moveDirection)
    {
    // Move Right
    case 0:   TweenPlay(tweenMove, x__, ease, 0, useDelta, 0.0, moveDuration, x, x+cellSize); break;
    // Move Up
    case 90:  TweenPlay(tweenMove, y__, ease, 0, useDelta, 0.0, moveDuration, y, y-cellSize); break;
    // Move Left
    case 180: TweenPlay(tweenMove, x__, ease, 0, useDelta, 0.0, moveDuration, x, x-cellSize); break;
    // Move Down
    case 270: TweenPlay(tweenMove, y__, ease, 0, useDelta, 0.0, moveDuration, y, y+cellSize); break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_self();

var _gridWidth = room_width/cellSize;
var _gridHeight = room_height/cellSize;

draw_set_colour(c_white);

var _xx = -1;
repeat(_gridWidth+1)
{
    ++_xx;
    draw_line(_xx*cellSize, 0, _xx*cellSize, room_height);
}

var _yy = -1;
repeat(_gridHeight+1)
{
    ++_yy;
    draw_line(0, _yy*cellSize, room_width, _yy*cellSize);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
