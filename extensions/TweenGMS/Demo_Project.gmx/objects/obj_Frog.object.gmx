<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Frog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 0;
x = room_width*0.25;
y = room_height*0.55;
startX = room_width*0.25;
destX = room_width*0.75;
startY = y;
jumpHeight = 100;
jumpDuration = 0.5;
jumpDelay = 0.5;
faceDirection = 1;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Set start/dest based on faced direction
// Horizontally flip image sprite
if (faceDirection == 1)
{
    image_xscale = -1;
    var _start = startX;
    var _dest = destX;
}
else
{
    image_xscale = 1;
    var _start = destX;
    var _dest = startX;
}

// Flip faced direction
faceDirection *= -1;

// Reset to sitting frog
image_index = 0;

// Fire linear 'x' tween between start and destination points
tweenX = TweenFire(id, x__, EaseLinear, TWEEN_MODE_ONCE, true, jumpDelay, jumpDuration, _start, _dest);

// Fire 'y' tween and have it bounce to give appearance of arcing jump
tweenY = TweenFire(id, y__, EaseOutSine, TWEEN_MODE_BOUNCE, true, jumpDelay, jumpDuration/2, startY, startY-jumpHeight);

// Add script callback to set image as jumping
TweenAddCallback(tweenY, TWEEN_EV_PLAY, id, image_index__, 1, id);

// Add user callback to repeatedly call this user event
TweenAddCallbackUser(tweenY, TWEEN_EV_FINISH, id, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
