<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_RunRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Values and Declare Tweens

// Prevent animation at start
image_speed = 0;

// Default to standing image
image_index = 1;

// Set how many pixels to move per second
pixelsPerSecond = 150;

// Declare null tween handles
tweenX = TweenNull();
tweenY = TweenNull();
tweenImgSpd = TweenNull();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Character Randomly

if (TweenExists(tweenX) == false)
{
    if (irandom(room_speed) == 0)
    {
        // Get random destination
        var _destX = random(room_width);
        var _destY = random(room_height);
        var _distance = distance_to_point(_destX, _destY);
        
        // Require minimum duration to activate tween movement
        if (_distance &gt; sprite_width/4)
        {
            var _duration = _distance/pixelsPerSecond;
            
            // Update character sprite based on left/right direction
            if (x &lt; _destX) { sprite_index = spr_RunRight; }
            else            { sprite_index = spr_RunLeft; }
            
            // Tween x/y to mouse position and assign new handles
            tweenX = TweenFire(id, x__, EaseInOutQuad, 0, true, 0.0, _duration, x, _destX);
            tweenY = TweenFire(id, y__, EaseInOutQuad, 0, true, 0.0, _duration, y, _destY);
            
            // Tween image speed
            tweenImgSpd = TweenFire(id, image_speed__, EaseInOutQuad, TWEEN_MODE_BOUNCE, true, 0.0, _duration/2, 0.25, 0.5);
            
            // Reset image speed and image index when character finishes movement -- User Event 0
            TweenAddCallbackUser(tweenImgSpd, TWEEN_EV_FINISH, id, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Character to Mouse Position

// Calculate duration based on distance and move speed
var _distance = distance_to_point(mouse_x, mouse_y);

// Require minimum duration to activate tween movement
if (_distance &gt; sprite_width/4)
{
    var _duration = _distance/pixelsPerSecond;
    
    // Update character sprite based on left/right direction
    if (x &lt; mouse_x) { sprite_index = spr_RunRight; }
    else             { sprite_index = spr_RunLeft; }
    
    // First, destroy all tweens associated with instance
    TweenDestroyTarget(id,false);
    
    // Tween x/y to mouse position and assign new handles
    tweenX = TweenFire(id, x__, EaseInOutQuad, 0, true, 0.0, _duration, x, mouse_x);
    tweenY = TweenFire(id, y__, EaseInOutQuad, 0, true, 0.0, _duration, y, mouse_y);
    
    // Tween image speed
    tweenImgSpd = TweenFire(id, image_speed__, EaseInOutQuad, TWEEN_MODE_BOUNCE, true, 0.0, _duration/2, 0.25, 0.5);
    
    // Reset image speed and image index when character finishes movement -- User Event 0
    TweenAddCallbackUser(tweenImgSpd, TWEEN_EV_FINISH, id, 0);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Animation -- TWEEN FINISH

// Stop animation
image_speed = 0;

// Set image to standing frame
image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,48</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
